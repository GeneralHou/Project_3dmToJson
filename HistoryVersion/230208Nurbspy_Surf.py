import numpy as np
import nurbspy as nrb
import matplotlib.pyplot as plt

# Define the array of control points
n_dim, n, m = 3, 5, 5
P = np.zeros((n_dim, n, m), dtype=complex)

# First column
P[:, 0, 0] = [0.00, 20.00, 0.00]
P[:, 1, 0] = [0.00, 13.333333333333330, 13.333333333333330]
P[:, 2, 0] = [0.00, 0.00, 26.666666666666670]
P[:, 3, 0] = [0.00, -13.333333333333330, 13.333333333333330]
P[:, 4, 0] = [0.00, -20.00, 0.00]


# Second column
P[:, 0, 1] = [18.494862068832450, 30.118523681807890, 0.00]
P[:, 1, 1] = [18.494862068832450, 20.079015787871930, 20.079015787871930]
P[:, 2, 1] = [18.494862068832450, 0.00, 40.158031575743860]
P[:, 3, 1] = [18.494862068832450, -20.079015787871930, 20.079015787871930]
P[:, 4, 1] = [18.494862068832450, -30.118523681807890, 0.00]

# Third column
P[:, 0, 2] = [71.835665957929190, 49.362999665652140, 0.00]
P[:, 1, 2] = [71.835665957929190, 32.908666443768090, 32.908666443768090]
P[:, 2, 2] = [71.835665957929190, 0.00, 65.81733288753620]
P[:, 3, 2] = [71.835665957929190, -32.908666443768090, 32.908666443768090]
P[:, 4, 2] = [71.835665957929190, -49.362999665652140, 0.00]

# Fourth column
P[:, 0, 3] = [129.74448279080040, 35.497071786611190, 0.00]
P[:, 1, 3] = [129.74448279080040, 23.664714524407460, 23.664714524407460]
P[:, 2, 3] = [129.74448279080040, 0.00, 47.329429048814930]
P[:, 3, 3] = [129.74448279080040, -23.664714524407460, 23.664714524407460]
P[:, 4, 3] = [129.74448279080040, -35.497071786611190, 0.00]

# Final column
P[:, 0, 4] = [160.00, 20.00, 0.00]
P[:, 1, 4] = [160.00, 13.333333333333330, 13.333333333333330]
P[:, 2, 4] = [160.00, 0.00, 26.666666666666670]
P[:, 3, 4] = [160.00, -13.333333333333330, 13.333333333333330]
P[:, 4, 4] = [160.00, -20.00, 0.00]


# Define the array of control point weights
W = np.zeros((n, m))
W[:, 0] = np.asarray([1, 1, 1, 1, 1])
W[:, 1] = np.asarray([1, 1, 1, 1, 1])
W[:, 2] = np.asarray([1, 1, 1, 1, 1])
W[:, 3] = np.asarray([1, 1, 1, 1, 1])
W[:, 4] = np.asarray([1, 1, 1, 1, 1])

# Maximum index of the control points (counting from zero)
n = np.shape(P)[1] - 1
m = np.shape(P)[2] - 1

# Define the order of the basis polynomials
p = 3
q = 3

# Define the knot vectors
knot_UU = [0.00, 0.00, 0.00, 0.00, 83.332890012955080, 166.66578002591020, 166.66578002591020, 166.66578002591020,
           166.66578002591020]
knot_VV = [0.00, 0.00, 0.00, 0.00, 68.7135279106180, 179.51076247267970, 179.51076247267970, 179.51076247267970,
           179.51076247267970]

knot_U = [x / max(knot_UU) for x in knot_UU]
knot_V = [x / max(knot_VV) for x in knot_UU]
U = np.asarray(knot_U)
V = np.asarray(knot_V)


# Create and plot the NURBS surface
nurbsSurface = nrb.NurbsSurface(control_points=P, weights=W, u_degree=p, v_degree=q, u_knots=U, v_knots=V)
fig, ax = nurbsSurface.plot(control_points=True)

plt.axis()
for angle in [45, 90]:
    ax.view_init(elev=angle, azim=angle)
    plt.savefig(f'surface.format{angle}.png', dpi=600)


